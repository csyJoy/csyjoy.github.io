<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Joy&#39;s Blog</title>
    <link>https://csyjoy.github.io/post/</link>
    <description>Recent content in Posts on Joy&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Jul 2022 22:22:34 +0800</lastBuildDate><atom:link href="https://csyjoy.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Functor_applicative_monad</title>
      <link>https://csyjoy.github.io/post/functor_applicative_monad/</link>
      <pubDate>Fri, 15 Jul 2022 22:22:34 +0800</pubDate>
      
      <guid>https://csyjoy.github.io/post/functor_applicative_monad/</guid>
      <description>学haskell有一段时间了，通过haskell也看了一些category theory的东西，虽然从头脑中已经知道了haskell中概念的由来，但是却不知道为啥要这样设计，看过一些书对于为啥haskell需要引入这个概念也并不是特别清晰，所以一直感到云里雾里，趁现在比较空，就详细上网查阅了一些关于原因的知识，非常的碎，所以这里希望将他们整理起来，并加上了我自己的一些想法，当然，半吊子学了haskell和category theory的我也只是从自己出发，如果有错的话请指出。
容器的抽象 在学haskell的过程中一直被灌输functor, applicative, monad是容器, 它们装了数据，但是为什么他们可以被看成容器?
因为在haskell中Hask这个category中，functor都是endo-functor,所以可以被理解成是容器。
为啥是endo-functor: 因为我们在使用一个functor构造新的type的时候，这个type还是在Hask中的
容器表示了一种计算的语义 这个陈述在我看来解答了为什么haskell需要存在容器这种东西。通过容器这个东西，可以很好实现指称语义,一种不同于命令式语言的操作语义的语义。
举个例子： Maybe这个容器就表示了一种结果可能不存在的计算的语义，IO表示了一种顺序上的计算语义
为什么抽象出Functor 我们都知道functor需要fmap, 它本质上就规定了一种不改变外部的容器，只改变内部数据的操作(这里可以联想到natural transformation, 一种改变外部容器，不改变内部值的操作)。正式由于这样的高阶的函数抽象，让我们可以在不修改不适配functor的函数前提下，依然可以使用functor提供的额外语义。当然fmap对于容器的语义需要手写。
一种有意思的思考就是将fmap想象成map扩展，但是这样比喻有点爸爸像儿子的感觉。
为什么抽象出了applicative 之前看过一本讲haskell的书说applicative其实出现的时间要比functor和monad要晚，applicative可以实现的功能，monad都可以实现。它出现的原因在我看来可以有实现容器层面函数的currying的原因。对于原来没有容器的函数来说，currying是显然的（从category theory的层面上来说存在一个adjunction）。但是如果我们使用fmap将一个函数变成了容器层面的函数的话，currying就不会显然满足了, 因为对于f (a -&amp;gt; b -&amp;gt; c) -&amp;gt; f a来说，从functor层面，除非进行暴力拆容器，不然是没有一种方法可以便捷操作的。所以我们引入了applicative来解决这个问题，将容器层面函数的currying进行了引入。 到这里，我们就可以想操作原来的函数一样操作容器层面的函数了，haskell中存在一种叫自然升格的写法，就是模仿了原来函数的curry化过程。
一般的函数的currying的写法(((f a) b) c) 通过引入applicative，我们使用自然升格的方式也可以达到这种currying的效果，具体例子f &amp;lt;$&amp;gt; F a &amp;lt;*&amp;gt; F b &amp;lt;*&amp;gt; F c
为什么抽象出了monad 在Real World Haskell将monad描述成了一种实现副作用的手段，这是传统的操作语义 和 指称语义的区别，操作语义对于副作用的宽容程度要比指称语义高，其内部可能会包括副作用，但是指称语义希望将副作用包含在容器上，而不是函数中，通过这样的方法，可以很好将pure这种性质保留下去，为了将副作用包含了容器上，我们抽象出了monad这个容器，monad存在多种定义方法，但是我认为，使用(&amp;gt;&amp;gt;=) :: m a -&amp;gt; (a -&amp;gt; m b) -&amp;gt; m b定义的monad从本质上体现了这种思想，当我们将m a给应用到a -&amp;gt; m b这函数的过程中，我们就需要完成副作用的操作，而不是在a -&amp;gt; m b这个函数内部实现副作用。</description>
    </item>
    
  </channel>
</rss>
